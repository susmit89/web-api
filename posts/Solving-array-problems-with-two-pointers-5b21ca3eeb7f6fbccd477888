{
	"_id ": "5b21ca3eeb7f6fbccd477888",
	"id": "Solving-array-problems-with-two-pointers-5b21ca3eeb7f6fbccd477888",
	"title": "Solving array problems with two pointers",
	"topic": {
		"_id": "5b21ca3eeb7f6fbccd486412",
		"name": "Algorithms"
	},
	"numberInStock": 6,
	"dailyRentalRate": 2.5,
	"publishDate": "2021-06-16T19:04:28.809Z",
	"metadata": ["Two-pointers is a pretty common method to solve array problems in linear time with constant space. Two-pointers problems can be solved by traversing an array by either fast and slow pointers or by left and right pointers. Two-pointers problems can be used for sliding window problems. We can adjust window size sliding left or right pointers. Let's see some examples to get a clear idea of two problems."],
	"content": {
		"rows": 7,
		"coumns": 0,
		"images": {},
		"text": [{
				"row": 0,
				"column": 0,
				"type": "heading",
				"value": ["When there is comparison of two numbers in an array"]
			},
			{
				"row": 1,
				"column": 0,
				"type": "paragraph",
				"value": ["If there requires a comparison between two numbers in an array it will require O(n^2) brute force. This is because we will have to run two loops for comparing each number with another number.  Look at following"]
			},
			{
				"row": 2,
				"column": 0,
				"type": "subheading",
				"value": ["Two Sum"]
			},
			{
				"row": 3,
				"column": 0,
				"type": "image",
				"caption": ["For a given sorted array [2,7,11,15] find the two numbers such that the sum is equal to the target 9."],
        "reference": "images/array_two_pointer_sum.jpg"
			},
			{
				"row": 4,
				"column": 0,
				"type": "code",
				"value": ["If this problem is solved with brute force we require two loops. \nfor i in numbers:\n\tFor j in numbers \n\t\tIf i + j == target:\n\t\t\tprint(\u201cTarget is sum of\u201d, i, j)\n"]
			},
			{
				"row": 5,
				"column": 0,
				"type": "link",
				"title": ["167. Two Sum II - Input array is sorted"],
				"link": "https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/"
			},
			{
				"row": 6,
				"column": 0,
				"type": "paragraph",
				"value": ["But we use two pointers that can be done in linear time O(n)."]
			},
			{
				"row": 7,
				"column": 0,
				"type": "list",
				"value": ["We need one pointer to start the array and another pointer at the end of the array.", "We take the sum of start and end. If the sum is equal to the target we return numbers at the start or end.", "If we find the sum is less than the target we need a bigger number this we can find by moving the start pointer by 1.", "We compare again if the sum matches target return numbers at start and end. If the sum is larger than the target we need a smaller number.", "We can find smaller numbers by moving the end towards the left. We do this repeatedly until the start and end are together. If we did not find we would return -1.","Below is the python code"]
			},
			{
				"row": 8,
				"column": 0,
				"type": "code",
				"value": ["def twoSum(numbers, target):\n        start = 0 #point start to left \n        end = len(numbers)-1  #point end to right. we use len-1 because array index starts with 0 \n        sum = 0 #initial sum with 0\n        while start != end : #run loop until start and end point to same number\n            sum = numbers[start] + numbers[end] \n            if sum > target: \n                end -= 1 #look for smaller number\n            elif sum < target:\n                start +=1 #look for larger number\n            else:\n                return [start+1,end+1] #condition satisfied"]
			},
			{
				"row": 9,
				"column": 0,
				"type": "heading",
				"value": [""]
			},
			{
				"row": 10,
				"column": 0,
				"type": "paragraph",
				"value": [""]
			},
			{
				"row": 11,
				"column": 0,
				"type": "heading",
				"value": ["When using source or target or combined data"]
			},
			{
				"row": 12,
				"column": 0,
				"type": "paragraph",
				"value": [""]
			},
			{
				"row": 13,
				"column": 0,
				"type": "paragraph",
				"value": [""]
			},
			{
				"row": 14,
				"column": 0,
				"type": "heading",
				"value": ["References"]
			},
			{
				"row": 15,
				"column": 0,
				"type": "references",
				"value": [{
					"authors": "Xingyi Yang∗, Xuehai He∗,Yuxiao Liang, Yue Yang",
					"title": "Transfer Learning or Self-supervised Learning? A Tale of Two Pretraining Paradigms"
				}]
			}
		]
	}
}
