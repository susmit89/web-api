{
	"_id ": "5b21ca3eeb7f6fbccd479058",
	"id": "Storing-Credentials-in-AWS-Kubernetes-CICD-5b21ca3eeb7f6fbccd479058",
	"title": "Storing Credentials in AWS, Kubernetes, CI/CD",
	"topic": {
		"_id": "5b21ca3eeb7f6fbccd471432",
		"name": "DevOps"
	},
	"numberInStock": 6,
	"dailyRentalRate": 2.5,
	"publishDate": "2021-07-02T19:04:28.809Z",
	"metadata": ["Credentials and other secrets of your application must be secured all the time. In times of compromise access to credentials can have a detrimental effect on your systems and data. Because DevOps involve different systems like AWS, Kubernetes, Jenkins, there is no single way to store credentials. This post discusses some ways to store the credentials for your application in a more secure manner."],
	"content": {
		"rows": 7,
		"coumns": 0,
		"images": {},
		"text": [{
				"row": 0,
				"column": 0,
				"type": "heading",
				"value": ["No Credentials in code Repository"]
			},
			{
				"row": 1,
				"column": 0,
				"type": "paragraph",
				"value": ["This is a very common mistake among developers while pushing code to code repositories like Github, Bitbucket, or Gitlab. While running a code locally your application may use credentials to connect to a database or other application. Therefore you update the credentials in your config file. But while pushing the code to the repository if you forget to delete the credentials your credentials may be exposed to anyone who has access to the code. This is even worse if your code is being used by a third party. Once credentials are in the repository it is difficult to clean because even if you delete the config file there is still a trace of credentials in the commit. So you also need to remove those commits and readjust the head of your code branch. One good solution is to always store credentials in environment variables and let your application access these credentials through the environment. In that way, you don't have to remember to clean your config files while pushing your code."]
			},
			{
				"row": 2,
				"column": 0,
				"type": "heading",
				"value": ["Using Credentials in Jenkins/Gitlab-CI/CircleCI or other CI/CD tools"]
			},
			{
				"row": 3,
				"column": 0,
				"type": "paragraph",
				"value": ["While running your workflows in CI/CD pipelines inside Jenkins or other tools like Gitlab-CI or CircleCI you need to access credentials to run unit tests or create builds. Most of these tools have configurations to set your credentials and can be accessed during the build process. There are also different levels of authorizations so one can run a pipeline but won't be able to access these credentials. It's also a good idea to let these tools set environment variables and your provisioning code can access these variables. Care must be taken that credentials are not logged into the pipeline logs."]
			},
			{
				"row": 4,
				"column": 0,
				"type": "paragraph",
				"value": [""]
			},
			{
				"row": 5,
				"column": 0,
				"type": "heading",
				"value": ["How to use bloom filters"]
			},
			{
				"row": 6,
				"column": 0,
				"type": "paragraph",
				"value": [""]
			},
			{
				"row": 7,
				"column": 0,
				"type": "heading",
				"value": ["Where is bloom filters used"]
			},
			{
				"row": 8,
				"column": 0,
				"type": "paragraph",
				"value": [""]
			},
			{
				"row": 9,
				"column": 0,
				"type": "heading",
				"value": [""]
			},
			{
				"row": 10,
				"column": 0,
				"type": "paragraph",
				"value": [""]
			},
			{
				"row": 11,
				"column": 0,
				"type": "heading",
				"value": ["When using source or target or combined data"]
			},
			{
				"row": 12,
				"column": 0,
				"type": "paragraph",
				"value": [""]
			},
			{
				"row": 13,
				"column": 0,
				"type": "paragraph",
				"value": [""]
			},
			{
				"row": 14,
				"column": 0,
				"type": "heading",
				"value": ["References"]
			},
			{
				"row": 15,
				"column": 0,
				"type": "references",
				"value": [{
					"authors": "Xingyi Yang∗, Xuehai He∗,Yuxiao Liang, Yue Yang",
					"title": "Transfer Learning or Self-supervised Learning? A Tale of Two Pretraining Paradigms"
				}]
			}
		]
	}
}
