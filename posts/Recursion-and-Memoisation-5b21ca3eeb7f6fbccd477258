{
	"_id ": "5b21ca3eeb7f6fbccd477258",
	"id": "Recursion-and-Memoisation-5b21ca3eeb7f6fbccd477258",
	"title": "Recursion and Memoization",
	"topic": {
		"_id": "5b21ca3eeb7f6fbccd486412",
		"name": "Algorithms"
	},
	"numberInStock": 6,
	"dailyRentalRate": 2.5,
	"publishDate": "2021-06-18T19:04:28.809Z",
	"metadata": ["The recursive call to a function is one of the methods to solve a problem that is made of many sub-problems. In recursion, the main idea is to find a base sub-problem and use it recursively. E.g Find factorial of 6.  We calculate 6! by multiplying 6 with 5!. Calculate 5! by multiplying 5 with 4!. So recursively we can solve factorial of n by calculating n * func(n-1). But while running this program the computer still needs to calculate every factorial. To calculate 6! it will still need to calculate 4! even though we already calculated 4! while calculating 5!. This is time-consuming so we use small memory to store previous calculations. Before doing new calculations first we check if the calculation is already in memory. If it is not, we calculate the result from memory. This is called Memoization. This method is pretty popular for solving Dynamic Programming and Backtracking Problems."],
	"content": {
		"rows": 7,
		"coumns": 0,
		"images": {},
		"text": [{
				"row": 0,
				"column": 0,
				"type": "heading",
				"value": ["Fibonacci Series with Recursion and Memoisation"]
			},
			{
				"row": 1,
				"column": 0,
				"type": "paragraph",
				"value": ["The Fibonacci Series is a classic problem in programming. It can be solved using recursion and memoization. Following is the python code to solve Fibonacci Series for n using recursion and memoization."]
			},
			{
				"row": 2,
				"column": 0,
				"type": "code",
				"value": ["#Fibonnaci Series with recursion\ndef fib(n):\n    if n==0:\n        return 0\n    if n == 1: \n        return 1\n    return fib(n-1) + fib(n-2)\n\nn=6\nwhile n:\n    print(fib(n)) #print sequence 1,1,2,3,5,8\n    n-=1"]
			},
			{
				"row": 3,
				"column": 0,
				"type": "code",
				"value": ["def fib(n, memo): #with Memo and recursion\n    if n==0:\n        return 0\n    if n == 1: \n        return 1\n    if n not in memo:  #if n is already solved return solved value else calculate and add to memo\n        memo[n] = fib(n-1, memo) + fib(n-2, memo)\n    return memo[n]\nn=6\nmemo={}\nwhile n:\n    print(fib(n,memo)) #print sequence 1,1,2,3,5,8\n    n-=1"]
			},
			{
				"row": 4,
				"column": 0,
				"type": "heading",
				"value": ["Recursion, implicit memory and Iteration"]
			},
			{
				"row": 5,
				"column": 0,
				"type": "image",
				"caption": ["Recursion and implicit memory"],
				"reference": "images/recursion_stack_5b21ca3eeb7f6fbccd477258.jpg"
			},
			{
				"row": 6,
				"column": 0,
				"type": "paragraph",
				"value": ["In the above both codes we use recursion. In the first code, it seems we donâ€™t require extra memory. But that is not true. The computer requires to store partial results in the stack before calculating sub-problems. After calculation, it pops out partial results from the stack and computes results. For Eg for n = 3, the computer pushes fib(3), then it pushes fib(2) and calculates fib(1) which is 1. Then it pops fib(2) from the stack and calculates. Finally, pop fib(3), calculate, and return the result. It does the same even if we use memoization. It is not space-efficient that is why we use iteration. All the recursion problems can be solved as iteration problems. It might get complicated but could be more efficient than recursion. Following is the iteration code of the same Fibonacci Series"]
			},
			{
				"row": 7,
				"column": 0,
				"type": "code",
				"value": ["def fib(n, memo): #with Memo and iteration\n    if n==0:\n        return 0\n    memo[0]=0 #base cases\n    memo[1]=1\n    i=2\n    while i<=n:\n        if i not in memo:  \n            memo[i] = memo[i-1] + memo[i-2]\n        i+=1\n        \n    return memo[n]\nn=6\nmemo={}\nwhile n:\n    print(fib(n,memo)) #print sequence 1,1,2,3,5,8\n    n-=1"]
			},
			{
				"row": 8,
				"column": 0,
				"type": "heading",
				"value": ["Solving Recursion problems"]
			},
			{
				"row": 9,
				"column": 0,
				"type": "paragraph",
				"value": ["Recursion is a very popular and easiest technique to solve Linked List and Binary Tree problems. Most of the recursion problem can be solved in O(n) time and space complexity where n is the number of nodes. Following are few examples."]
			},
			{
				"row": 10,
				"column": 0,
				"type": "subheading",
				"value": [" Merge Two Sorted Lists"]
			},
			{
				"row": 11,
				"column": 0,
				"type": "link",
				"title": [" Merge Two Sorted Lists"],
				"link": "https://leetcode.com/problems/merge-two-sorted-lists/"
			},
			{
				"row": 12,
				"column": 0,
				"type": "image",
				"caption": ["Given a two sorted linked list merge it into one linked list"],
				"reference": "images/merge_ex1_5b21ca3eeb7f6fbccd477258.jpg"
			},
			{
				"row": 13,
				"column": 0,
				"type": "list",
				"value": ["Here we have two linked lists a and b. We want to use recursion.","We keep updating a and at the end, we will return the head of a.","But before solving any recursion problems we need to check base condition.","In this case base condition is check for b. If b is null then return a. If b is less than a then swap a and b.","Then we use recursion to check the next nodes of a."]
			},
			{
				"row": 14,
				"column": 0,
				"type": "code",
				"value": ["class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n        \ndef mergeTwoLists(a: ListNode, b: ListNode) -> ListNode:\n    if not a or b and a.val > b.val: #check if a or b is null and b is smaller than a\n        a, b = b, a #swap a and b\n    if a: #if a is not null go to next node of a\n        a.next = self.mergeTwoLists(a.next, b)\n    return a #return a"]
			},
			{
				"row": 13,
				"column": 0,
				"type": "code",
				"value": ["With Iteration\ndef mergeTwoLists(a: ListNode, b: ListNode) -> ListNode:\n        head = dummy = ListNode(0) #use dummy node amd head, keep adding lowest number to head\n        while a or b:\n            if a and not b: #if a is null, add b to head\n                head.next = a\n                a=a.next\n            elif b and not a: #if b is null, add a to head\n                head.next = b\n                b=b.next\n            elif a.val > b.val: #if both not null, add lowest\n                head.next = b\n                b=b.next\n            else:\n                head.next = a\n                a=a.next\n            head = head.next #make head.next as new head\n                \n        return dummy.next\n"]
			}
			
			
		]
	}
}
