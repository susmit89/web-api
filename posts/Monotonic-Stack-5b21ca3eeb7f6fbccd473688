{
	"_id ": "5b21ca3eeb7f6fbccd473688",
	"id": "Monotonic-Stack-5b21ca3eeb7f6fbccd473688",
	"title": "Monotonic Stack",
	"topic": {
		"_id": "5b21ca3eeb7f6fbccd486865",
		"name": "Data Structure"
	},
	"numberInStock": 6,
	"dailyRentalRate": 2.5,
	"publishDate": "2020-01-03T19:04:28.809Z",
	"metadata": ["Stack is one of the popular data structures used in a lot of algorithms like backtracking, depth-for-search(DFS), reverse string, undo/redo, call stack and many more. There are many forms of stacks such as Min Stack - which gives the minimum number in stack in constant time O(1). Max Stack - which gives the maximum number. Other than that there is a monotonic stack. It is called monotonic because the order in the stack is either increasing or decreasing."],
	"content": {
		"rows": 7,
		"coumns": 0,
		"images": {},
		"text": [{
				"row": 0,
				"column": 0,
				"type": "heading",
				"value": ["When to use Stack"]
			},
			{
				"row": 1,
				"column": 0,
				"type": "paragraph",
				"value": ["Stack is mostly used in problem solving where you store partially solved problems(probably because there was interruption and you want to focus on different problems e.g. call stack, you don't have enough input to solve e.g. DFS, or traversing hierarchy e.g navigating folders in file system) only to be solved later in Last in First Order(LIFO)."]
			},
			{
				"row": 2,
				"column": 0,
				"type": "heading",
				"value": ["Intuition for Monotonic Stack"]
			},
			{
				"row": 3,
				"column": 0,
				"type": "image",
				"caption": ["Consider an example where 5 people with different heights are standing in line and one has to tell who is the next tallest person standing on the right side?"],
				"reference": "images/person_height.jpg"
			},
			{
				"row": 4,
				"column": 0,
				"type": "paragraph",
				"value": ["We can solve this problem by considering one person at a time and comparing heights of the person standing next to the right. That means for every person we have traversed once. So two find the answer we traverse n^2. Is there a way we can find out by going through each person once?"]
			},
			{
				"row": 5,
				"column": 0,
				"type": "code",
				"value": ["for current_person_height in heights:\n \t for person_on_right_height in heights:\n\t\tif current_person_height < person_on_right_height:\n\t\t\tprint(“Tallest person on right height is ”, person_on_right_height)"]
			},
			{
				"row": 6,
				"column": 0,
				"type": "paragraph",
				"value": ["That's where the monotonic stack comes in:"]
			},
			{
				"row": 7,
				"column": 0,
				"type": "list",
				"value": ["We are going to store the height of the first person in the stack and loop through others.",
					"From second person onwards, we compare the current person's height with the height of the person at the top of the stack.",
					"If we found the current person is taller than the person at top of the stack we pop that person from the stack. Current person is taller than the person we just popped out.",
					"If the stack is still not empty we do the same comparison until the stack is empty or the current person is shorter.",
					"At the end of the loop we add the current person to stack. This way we traverse the list only once."
				]
			},
			{
				"row": 8,
				"column": 0,
				"type": "code",
				"value": ["height=[9,6,10,7,9]\nstack = [] #initialize stack\nresult = [0,0,0,0,0] #initialize array to store positon of taller person on right\nstack.append(0) #add person standing at 0 position\nfor current in range(1, len(height)): #iterate through from second person till last\n\twhile stack and height[stack[-1]] < height[current]: #compare current person height with the height of the person at the top of the stack\n\t\t#current person is taller person for the person at top of stack\n\t\tresult[stack.pop()] = current\n\t stack.append(current)\nprint(result) #[2, 2, 0, 4, 0], No person is taller for 3rd person and there is no right for 5th person"]
			},
			{
				"row": 9,
				"column": 0,
				"type": "heading",
				"value": ["How to use Monotonic Stack"]
			},
			{
				"row": 10,
				"column": 0,
				"type": "paragraph",
				"value": ["We can use the same monotonic Stack to find a short person to the right by changing comparison for less than to greater than. We can also change direction to find the tallest person on the left side by changing the for loop to iterate from last element to first."]
			},
			{
				"row": 11,
				"column": 0,
				"type": "heading",
				"value": ["What happens if people are standing in a circle?"]
			},
			{
				"row": 11,
				"column": 0,
				"type": "paragraph",
				"value": ["Last person standing will be next to the first person. In this case we need to iterate all people one more time to find taller people for the last person. We can modify the above code by changing the for loop to go through the list twice. But that will mess up positions of person in second loop, so to correct it we apply mod to current position."]
			},
			{
				"row": 12,
				"column": 0,
				"type": "code",
				"value": ["height=[9,6,10,7,9]\nstack = [] #initialize stack\nresult = [0,0,0,0,0] #initialize array to store positon of taller person on right\nstack.append(0) #add person standing at 0 position\nfor current in range(1, len(height)*2): #iterate through from second person till last\n\twhile stack and height[stack[-1]] < height[current % len(height)]: #compare current person height with the height of the person at the top of the stack\n\t\t#current person is taller person for the person at top of stack\n\t\tresult[stack.pop()] = current % len(height)\n\tstack.append(current % len(height))\nprint(result) #[2, 2, 0, 4, 2], 3rd person can see 2nd person now"]
			}
		]
	}
}
