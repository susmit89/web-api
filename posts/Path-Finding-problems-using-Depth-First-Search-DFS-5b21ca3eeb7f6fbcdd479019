{
	"_id ": "5b21ca3eeb7f6fbcdd479019",
	"id": "Path-Finding-problems-using-Depth-First-Search-DFS-5b21ca3eeb7f6fbcdd479019",
	"title": "Path Finding problems using Depth-First-Search DFS",
	"topic": {
		"_id": "5b21ca3eeb7f6fbccd486412",
	    "name": "Algorithms"
	},
	"keywords": ["Graph Search", "Depth First Search", "Stack", "Path Finding"],
	"dailyRentalRate": 2.5,
	"publishDate": "2021-07-12T19:04:28.809Z",
	"metadata": ["Pathfinding problems have many applications, from computer games, network routing to AI robots. If we want to explore unknown graphs and want to gather more information, DFS is a good choice. DFS is the most simple path exploration of all algorithms. It is appropriate to use during space restriction in complex state representation and acyclic graphs."],
	"content": {
		"rows": 7,
		"coumns": 0,
		"images": {},
		"text": [{
				"row": 0,
				"column": 0,
				"type": "heading",
				"value": ["All Paths From Source to Target"]
			},
			{
				"row": 1,
				"column": 0,
				"type": "link",
				"title": ["797. All Paths From Source to Target"],
				"link": "https://leetcode.com/problems/all-paths-from-source-to-target/"
			},
			{
				"row": 2,
				"column": 0,
				"type": "paragraph",
				"value": ["Given a directed acyclic graph (DAG) of n nodes labeled from 0 to n - 1, find all possible paths from node 0 to node n - 1, and return them in any order. The graph is given as follows: graph[i] is a list of all nodes you can visit from node i (i.e., there is a directed edge from node i to node graph[i][j])."]
			},
			{
				"row": 3,
				"column": 0,
				"type": "image",
				"caption": ["Input: graph = [[1,2],[3],[3],[]]"],
				"reference": "images/all_1-5b21ca3eeb7f6fbcdd479019.jpg"
			},
			{
				"row": 4,
				"column": 0,
				"type": "subheading",
				"value": ["Intuition"]
			},
			{
				"row": 5,
				"column": 0,
				"type": "list",
				"value": ["In the above example, we need to find all paths from 0 node to n-1 node.","We will use recursive DFS.","Initialize the visited list to store visited nodes so we don't visit the same node twice.","Initialize the result list to store paths.","We follow 3 steps: mark node visited, check if the node is the destination, and explore its unvisited neighbors.","Our DFS algorithm will first start at node 0 and the destination is 3.","Below is the python code"]
			},
			{
				"row": 6,
				"column": 0,
				"type": "code",
				"value": ["\ndef allPathsSourceTarget(graph):\n    def dfs(visited, vertex, destination):\n        visited.append(vertex) #Mark node visted\n        if destination == vertex: #check if we reached destination \n                \n            res.append(visited[:]) #copy nodes from visited to result\n            \n        for u in graph[vertex]: \n            if u not in visited: #explore its unvisited neighbours\n                dfs(visited, u, destination)\n        visited.remove(vertex) \n    visited = [] # to store visited node\n    res = [] # to store the result\n    dfs(visited, 0, len(graph)-1)\n    return res #res = [[0,1,3],[0,2,3]]"]
			},
			{
				"row": 7,
				"column": 0,
				"type": "heading",
				"value": ["Path with Maximum Gold"]
			},
			{
				"row": 8,
				"column": 0,
				"type": "link",
				"title": ["1219. Path with Maximum Gold"],
				"link": "https://leetcode.com/problems/path-with-maximum-gold/"
			},
			{
				"row": 9,
				"column": 0,
				"type": "paragraph",
				"value": ["In a gold mine grid of size m x n, each cell in this mine has an integer representing the amount of gold in that cell, 0 if it is empty.","Return the maximum amount of gold you can collect under the conditions:"]
			},
			{
				"row": 10,
				"column": 0,
				"type": "code",
				"value": ["\nInput: grid = [[0,6,0],[5,8,7],[0,9,0]]\nOutput: 24\nExplanation:\n[[0,6,0],\n [5,8,7],\n [0,9,0]]\nPath to get the maximum gold, 9 -> 8 -> 7.\n"]
			},
			{
				"row": 11,
				"column": 0,
				"type": "image",
				"caption": ["Represent above problem in graph. Red is maximum path."],
				"reference":"images/path-finding-gold-5b21ca3eeb7f6fbcdd479019.jpg"
			},
			{
				"row": 12,
				"column": 0,
				"type": "subheading",
				"value": ["Intuition"]
			},
			{
				"row": 13,
				"column": 0,
				"type": "list",
				"value": ["Here each node is connected to itself and other nodes. We can visualize the grid in the form of a graph as shown in the above figure.","This problem can be solved in similar 3 steps as the above problem with little modifications.","We not only check visited nodes. But we also need to check we stay in the grid.","Since we have asked for maximum gold we will start the path with sum 0 and keep adding new path node values to the sum.","Every time we move top, left, right, the bottom cell we check if the node is unvisited and call DFS.","We want to choose only nodes in the path which give us the maximum sum. So we take a maximum of neighbors and return that value."]
			},
			{
				"row": 14,
				"column": 0,
				"type": "code",
				"value": ["\ndef getMaximumGold(grid):\n    def dfs(i, j, sum, visited):\n        #return if check i and j are underflow or overflow or (i,j) already visited\n        if i < 0 or i >= m or j < 0 or j >= n or not grid[i][j] or (i, j) in visited:\n            return sum \n        visited.add((i, j))\n        sum += grid[i][j] #add to current sum\n        mx = 0\n        for x, y in ((i, j + 1), (i , j - 1), (i + 1, j), (i - 1, j)): #check top, left, right, bottom neighbours\n            mx = max(dfs(x, y, sum, visited), mx) #only choose maximum value\n        visited.discard((i, j)) #remove from visited\n        return mx #return total path value \n\n    m, n = len(grid), len(grid[0])\n    maximum_gold = float('-inf')\n    for i in range(m):\n        for j in range(n):\n            #check with every (i,j) node as start node  \n            maximum_gold = max(maximum_gold, dfs(i, j, 0, set())) \n    return maximum_gold\n"]
			},
			{
				"row": 7,
				"column": 0,
				"type": "heading",
				"value": ["Flood Fill"]
			},
			{
				"row": 8,
				"column": 0,
				"type": "link",
				"title": ["733. Flood Fill"],
				"link": "https://leetcode.com/problems/flood-fill/"
			},
			{
				"row": 9,
				"column": 0,
				"type": "paragraph",
				"value": ["An image is represented by an m x n integer grid image where image[i][j] represents the pixel value of the image. You are also given three integers sr, sc, and newColor. You should perform a flood fill on the image starting from the pixel image[sr][sc]. To perform a flood fill, consider the starting pixel, plus any pixels connected 4-directionally to the starting pixel of the same color as the starting pixel, plus any pixels connected 4-directionally to those pixels (also with the same color), and so on. Replace the color of all of the aforementioned pixels with newColor. Return the modified image after performing the flood fill."]
			},
			{
				"row": 10,
				"column": 0,
				"type": "code",
				"value": ["\nInput: image = [[1,1,1],[1,1,0],[1,0,1]], sr = 1, sc = 1, newColor = 2\nOutput: [[2,2,2],[2,2,0],[2,0,1]]\nExplanation: From the center of the image with position (sr, sc) = (1, 1) (i.e., the red pixel), all pixels connected by a path of the same color as the starting pixel (i.e., the blue pixels) are colored with the new color.\nNote the bottom corner is not colored 2, because it is not 4-directionally connected to the starting pixel.\n"]
			},
			{
				"row": 11,
				"column": 0,
				"type": "image",
				"caption": ["Flood Fill"],
				"reference":"images/flood1-grid-5b21ca3eeb7f6fbcdd479019.jpg"
			},
			{
				"row": 12,
				"column": 0,
				"type": "subheading",
				"value": ["Intuition"]
			},
			{
				"row": 13,
				"column": 0,
				"type": "list",
				"value": ["Even this problem is similar to the above problems.","Here we don't require a visited list as we check that value of the cell. ","If the value of the cell is already a new color that means we already visited, we return."]
			},
			{
				"row": 14,
				"column": 0,
				"type": "code",
				"value": ["\ndef floodFill(image, sr, sc, newColor):\n    def dfs(i,j):\n        #if going out grid return \n        if i < 0 or i >= row or j < 0 or j >= col:\n            return\n        #color is not same as orginal color or already colored with new color\n        if image[i][j] != color or image[i][j] == newColor:\n            return\n            \n        image[i][j] = newColor\n            \n        for x,y in ((i, j + 1), (i , j - 1), (i + 1, j), (i - 1, j)):  \n            dfs(x,y)\n            \n    row = len(image)\n    col = len(image[0])\n    color = image[sr][sc]\n    dfs(sr,sc)\n    return image\n"]
			}
		]
	}
}
